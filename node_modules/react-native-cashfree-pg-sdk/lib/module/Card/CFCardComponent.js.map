{"version":3,"names":["TextInput","React","forwardRef","CFCardPayment","CFEnvironment","CFPaymentGatewayService","luhnCheck","cardNumber","length","replace","sum","isAlternate","i","digit","parseInt","getTDR","session","bin","route","payment_session_id","body","JSON","stringify","getInfo","environment","getCardBin","env","bodyData","baseUrl","SANDBOX","url","response","fetch","method","headers","ok","json","error","CardInput","cfSession","cardListener","style","props","ref","inputNumber","setInputNumber","useState","useImperativeHandle","doPayment","tdrJson","cardBinJson","firstEightDigits","handleChange","useCallback","completeResponse","textWithoutSpaces","replaceAll","formattedText","end","substring","tdrResponse","cardBinResponse","fetchDataAndSet","then","catch","cardInfo","cardPayment","makePayment","e","console","log","message","handleSubmitEditingEvent","event","newEvent","nativeEvent","text","onSubmitEditing","handleEndEditingEvent","onEndEditing","handleFocusEvent","onFocus","handleBlurEvent","onBlur","InputComponent","onChangeText","onChange","otherProps","createElement","keyboardType","inputMode","value"],"sources":["CFCardComponent.js"],"sourcesContent":["import { TextInput } from 'react-native';\nimport React, { forwardRef } from 'react';\nimport { CFCardPayment, CFEnvironment } from 'cashfree-pg-api-contract';\nimport { CFPaymentGatewayService } from '../index';\nfunction luhnCheck(cardNumber) {\n    if (cardNumber.length === 0) {\n        return false;\n    }\n    cardNumber = cardNumber.replace(/\\s/g, ''); // Remove spaces\n    let sum = 0;\n    let isAlternate = false;\n    for (let i = cardNumber.length - 1; i >= 0; i--) {\n        let digit = parseInt(cardNumber[i], 10);\n        if (isAlternate) {\n            digit *= 2;\n            if (digit > 9) {\n                digit -= 9;\n            }\n        }\n        sum += digit;\n        isAlternate = !isAlternate;\n    }\n    return sum % 10 === 0;\n}\n/**\n * Fetching Tdr info with card bin data & cfSession object\n * @param session :  for payment sessionId & env\n * @param bin : for card number\n */\nasync function getTDR(session, bin) {\n    const route = `/pg/sdk/js/${session.payment_session_id}/v2/tdr`;\n    const body = JSON.stringify({ 'code': bin, 'code_type': 'bin' });\n    return await getInfo(session.environment, route, body);\n}\n/**\n * Fetching CardBin info with card bin data & cfSession object\n * @param session :  for payment sessionId & env\n * @param bin : for card number\n */\nasync function getCardBin(session, bin) {\n    const route = `/pg/sdk/js/${session.payment_session_id}/cardBin`;\n    const body = JSON.stringify({ 'card_number': bin });\n    return await getInfo(session.environment, route, body);\n}\nasync function getInfo(env, route, bodyData) {\n    let baseUrl = 'https://api.cashfree.com';\n    if (env === CFEnvironment.SANDBOX) {\n        baseUrl = 'https://sandbox.cashfree.com';\n    }\n    const url = baseUrl + route;\n    try {\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: bodyData,\n        });\n        if (!response.ok) {\n            return null;\n        }\n        return await response.json();\n    }\n    catch (error) {\n        return null;\n    }\n}\nconst CardInput = forwardRef(({ cfSession, cardListener, style, ...props }, ref) => {\n    const [inputNumber, setInputNumber] = React.useState('');\n    React.useImperativeHandle(ref, () => ({ doPayment }));\n    let tdrJson = null;\n    let cardBinJson = null;\n    let firstEightDigits = '';\n    const handleChange = React.useCallback(async (cardNumber) => {\n        let completeResponse = {};\n        const textWithoutSpaces = cardNumber.replaceAll(' ', '');\n        if (textWithoutSpaces.length === 0)\n            setInputNumber('');\n        let formattedText = '';\n        /**\n         * Code to format card input number & set to input box\n         */\n        for (let i = 0; i < textWithoutSpaces.length; i += 4) {\n            let end = i + 4;\n            if (end > textWithoutSpaces.length) {\n                end = textWithoutSpaces.length;\n            }\n            formattedText += textWithoutSpaces.substring(i, end);\n            if (end !== textWithoutSpaces.length) {\n                formattedText += ' ';\n            }\n            setInputNumber(formattedText);\n        }\n        let tdrResponse = null;\n        let cardBinResponse = null;\n        /**\n         * Fetch Tdr & CardBin data & set to local variable\n         */\n        async function fetchDataAndSet() {\n            await getTDR(cfSession, textWithoutSpaces)\n                .then((response) => {\n                tdrResponse = response;\n            })\n                .catch(() => {\n                tdrResponse = null;\n            });\n            await getCardBin(cfSession, textWithoutSpaces)\n                .then((response) => {\n                cardBinResponse = response;\n            })\n                .catch(() => {\n                cardBinResponse = null;\n            });\n            if (tdrResponse) {\n                tdrJson = tdrResponse;\n                completeResponse['tdr_info'] = tdrJson;\n            }\n            if (cardBinResponse) {\n                cardBinJson = cardBinResponse;\n                completeResponse['card_bin_info'] = cardBinJson;\n            }\n        }\n        if (textWithoutSpaces.length === 8) {\n            firstEightDigits = textWithoutSpaces;\n            await fetchDataAndSet();\n        }\n        else if (textWithoutSpaces.length > 8) {\n            if (firstEightDigits === textWithoutSpaces.substring(0, 8)) {\n                completeResponse['tdr_info'] = tdrJson;\n                completeResponse['card_bin_info'] = cardBinJson;\n            }\n            else {\n                firstEightDigits = textWithoutSpaces.substring(0, 8);\n                tdrJson = null;\n                cardBinJson = null;\n                await fetchDataAndSet();\n            }\n        }\n        if (textWithoutSpaces.length < 8) {\n            cardBinJson = null;\n            tdrJson = null;\n            firstEightDigits = '';\n        }\n        if (cardBinJson !== null) {\n            completeResponse['card_network'] = cardBinJson['scheme'];\n        }\n        completeResponse['luhn_check_info'] = 'SUCCESS';\n        if (!luhnCheck(textWithoutSpaces)) {\n            completeResponse['luhn_check_info'] = 'FAIL';\n        }\n        completeResponse['card_length'] = textWithoutSpaces.length;\n        return cardListener(JSON.stringify(completeResponse));\n    }, [cardListener]);\n    const doPayment = (cardInfo) => {\n        try {\n            cardInfo.cardNumber = inputNumber.replaceAll(' ', '');\n            const cardPayment = new CFCardPayment(cfSession, cardInfo);\n            CFPaymentGatewayService.makePayment(cardPayment);\n        }\n        catch (e) {\n            console.log(e.message);\n        }\n    };\n    const handleSubmitEditingEvent = (event) => {\n        const newEvent = { ...event };\n        delete newEvent.nativeEvent.text;\n        if (onSubmitEditing) {\n            onSubmitEditing(newEvent);\n        }\n    };\n    const handleEndEditingEvent = (event) => {\n        const newEvent = { ...event };\n        delete newEvent.nativeEvent.text;\n        if (onEndEditing) {\n            onEndEditing(newEvent);\n        }\n    };\n    const handleFocusEvent = (event) => {\n        const newEvent = { ...event };\n        delete newEvent.nativeEvent.text;\n        if (onFocus) {\n            onFocus(newEvent);\n        }\n    };\n    const handleBlurEvent = (event) => {\n        const newEvent = { ...event };\n        delete newEvent.nativeEvent.text;\n        if (onBlur) {\n            onBlur(newEvent);\n        }\n    };\n    const InputComponent = TextInput;\n    const { onChangeText, onChange, onSubmitEditing, onEndEditing, onFocus, onBlur, ...otherProps } = props;\n    return (React.createElement(InputComponent, { keyboardType: 'numeric', inputMode: 'numeric', value: inputNumber, onChangeText: handleChange, onSubmitEditing: handleSubmitEditingEvent, onEndEditing: handleEndEditingEvent, onFocus: handleFocusEvent, onBlur: handleBlurEvent, style: style, ...otherProps }));\n});\nexport default CardInput;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,cAAc;AACxC,OAAOC,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,aAAa,EAAEC,aAAa,QAAQ,0BAA0B;AACvE,SAASC,uBAAuB,QAAQ,UAAU;AAClD,SAASC,SAASA,CAACC,UAAU,EAAE;EAC3B,IAAIA,UAAU,CAACC,MAAM,KAAK,CAAC,EAAE;IACzB,OAAO,KAAK;EAChB;EACAD,UAAU,GAAGA,UAAU,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;EAC5C,IAAIC,GAAG,GAAG,CAAC;EACX,IAAIC,WAAW,GAAG,KAAK;EACvB,KAAK,IAAIC,CAAC,GAAGL,UAAU,CAACC,MAAM,GAAG,CAAC,EAAEI,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC7C,IAAIC,KAAK,GAAGC,QAAQ,CAACP,UAAU,CAACK,CAAC,CAAC,EAAE,EAAE,CAAC;IACvC,IAAID,WAAW,EAAE;MACbE,KAAK,IAAI,CAAC;MACV,IAAIA,KAAK,GAAG,CAAC,EAAE;QACXA,KAAK,IAAI,CAAC;MACd;IACJ;IACAH,GAAG,IAAIG,KAAK;IACZF,WAAW,GAAG,CAACA,WAAW;EAC9B;EACA,OAAOD,GAAG,GAAG,EAAE,KAAK,CAAC;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAeK,MAAMA,CAACC,OAAO,EAAEC,GAAG,EAAE;EAChC,MAAMC,KAAK,GAAI,cAAaF,OAAO,CAACG,kBAAmB,SAAQ;EAC/D,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;IAAE,MAAM,EAAEL,GAAG;IAAE,WAAW,EAAE;EAAM,CAAC,CAAC;EAChE,OAAO,MAAMM,OAAO,CAACP,OAAO,CAACQ,WAAW,EAAEN,KAAK,EAAEE,IAAI,CAAC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,eAAeK,UAAUA,CAACT,OAAO,EAAEC,GAAG,EAAE;EACpC,MAAMC,KAAK,GAAI,cAAaF,OAAO,CAACG,kBAAmB,UAAS;EAChE,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;IAAE,aAAa,EAAEL;EAAI,CAAC,CAAC;EACnD,OAAO,MAAMM,OAAO,CAACP,OAAO,CAACQ,WAAW,EAAEN,KAAK,EAAEE,IAAI,CAAC;AAC1D;AACA,eAAeG,OAAOA,CAACG,GAAG,EAAER,KAAK,EAAES,QAAQ,EAAE;EACzC,IAAIC,OAAO,GAAG,0BAA0B;EACxC,IAAIF,GAAG,KAAKtB,aAAa,CAACyB,OAAO,EAAE;IAC/BD,OAAO,GAAG,8BAA8B;EAC5C;EACA,MAAME,GAAG,GAAGF,OAAO,GAAGV,KAAK;EAC3B,IAAI;IACA,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;MAC9BG,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDd,IAAI,EAAEO;IACV,CAAC,CAAC;IACF,IAAI,CAACI,QAAQ,CAACI,EAAE,EAAE;MACd,OAAO,IAAI;IACf;IACA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAChC,CAAC,CACD,OAAOC,KAAK,EAAE;IACV,OAAO,IAAI;EACf;AACJ;AACA,MAAMC,SAAS,gBAAGpC,UAAU,CAAC,CAAC;EAAEqC,SAAS;EAAEC,YAAY;EAAEC,KAAK;EAAE,GAAGC;AAAM,CAAC,EAAEC,GAAG,KAAK;EAChF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAG5C,KAAK,CAAC6C,QAAQ,CAAC,EAAE,CAAC;EACxD7C,KAAK,CAAC8C,mBAAmB,CAACJ,GAAG,EAAE,OAAO;IAAEK;EAAU,CAAC,CAAC,CAAC;EACrD,IAAIC,OAAO,GAAG,IAAI;EAClB,IAAIC,WAAW,GAAG,IAAI;EACtB,IAAIC,gBAAgB,GAAG,EAAE;EACzB,MAAMC,YAAY,GAAGnD,KAAK,CAACoD,WAAW,CAAC,MAAO9C,UAAU,IAAK;IACzD,IAAI+C,gBAAgB,GAAG,CAAC,CAAC;IACzB,MAAMC,iBAAiB,GAAGhD,UAAU,CAACiD,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC;IACxD,IAAID,iBAAiB,CAAC/C,MAAM,KAAK,CAAC,EAC9BqC,cAAc,CAAC,EAAE,CAAC;IACtB,IAAIY,aAAa,GAAG,EAAE;IACtB;AACR;AACA;IACQ,KAAK,IAAI7C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2C,iBAAiB,CAAC/C,MAAM,EAAEI,CAAC,IAAI,CAAC,EAAE;MAClD,IAAI8C,GAAG,GAAG9C,CAAC,GAAG,CAAC;MACf,IAAI8C,GAAG,GAAGH,iBAAiB,CAAC/C,MAAM,EAAE;QAChCkD,GAAG,GAAGH,iBAAiB,CAAC/C,MAAM;MAClC;MACAiD,aAAa,IAAIF,iBAAiB,CAACI,SAAS,CAAC/C,CAAC,EAAE8C,GAAG,CAAC;MACpD,IAAIA,GAAG,KAAKH,iBAAiB,CAAC/C,MAAM,EAAE;QAClCiD,aAAa,IAAI,GAAG;MACxB;MACAZ,cAAc,CAACY,aAAa,CAAC;IACjC;IACA,IAAIG,WAAW,GAAG,IAAI;IACtB,IAAIC,eAAe,GAAG,IAAI;IAC1B;AACR;AACA;IACQ,eAAeC,eAAeA,CAAA,EAAG;MAC7B,MAAM/C,MAAM,CAACwB,SAAS,EAAEgB,iBAAiB,CAAC,CACrCQ,IAAI,CAAEhC,QAAQ,IAAK;QACpB6B,WAAW,GAAG7B,QAAQ;MAC1B,CAAC,CAAC,CACGiC,KAAK,CAAC,MAAM;QACbJ,WAAW,GAAG,IAAI;MACtB,CAAC,CAAC;MACF,MAAMnC,UAAU,CAACc,SAAS,EAAEgB,iBAAiB,CAAC,CACzCQ,IAAI,CAAEhC,QAAQ,IAAK;QACpB8B,eAAe,GAAG9B,QAAQ;MAC9B,CAAC,CAAC,CACGiC,KAAK,CAAC,MAAM;QACbH,eAAe,GAAG,IAAI;MAC1B,CAAC,CAAC;MACF,IAAID,WAAW,EAAE;QACbX,OAAO,GAAGW,WAAW;QACrBN,gBAAgB,CAAC,UAAU,CAAC,GAAGL,OAAO;MAC1C;MACA,IAAIY,eAAe,EAAE;QACjBX,WAAW,GAAGW,eAAe;QAC7BP,gBAAgB,CAAC,eAAe,CAAC,GAAGJ,WAAW;MACnD;IACJ;IACA,IAAIK,iBAAiB,CAAC/C,MAAM,KAAK,CAAC,EAAE;MAChC2C,gBAAgB,GAAGI,iBAAiB;MACpC,MAAMO,eAAe,CAAC,CAAC;IAC3B,CAAC,MACI,IAAIP,iBAAiB,CAAC/C,MAAM,GAAG,CAAC,EAAE;MACnC,IAAI2C,gBAAgB,KAAKI,iBAAiB,CAACI,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;QACxDL,gBAAgB,CAAC,UAAU,CAAC,GAAGL,OAAO;QACtCK,gBAAgB,CAAC,eAAe,CAAC,GAAGJ,WAAW;MACnD,CAAC,MACI;QACDC,gBAAgB,GAAGI,iBAAiB,CAACI,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;QACpDV,OAAO,GAAG,IAAI;QACdC,WAAW,GAAG,IAAI;QAClB,MAAMY,eAAe,CAAC,CAAC;MAC3B;IACJ;IACA,IAAIP,iBAAiB,CAAC/C,MAAM,GAAG,CAAC,EAAE;MAC9B0C,WAAW,GAAG,IAAI;MAClBD,OAAO,GAAG,IAAI;MACdE,gBAAgB,GAAG,EAAE;IACzB;IACA,IAAID,WAAW,KAAK,IAAI,EAAE;MACtBI,gBAAgB,CAAC,cAAc,CAAC,GAAGJ,WAAW,CAAC,QAAQ,CAAC;IAC5D;IACAI,gBAAgB,CAAC,iBAAiB,CAAC,GAAG,SAAS;IAC/C,IAAI,CAAChD,SAAS,CAACiD,iBAAiB,CAAC,EAAE;MAC/BD,gBAAgB,CAAC,iBAAiB,CAAC,GAAG,MAAM;IAChD;IACAA,gBAAgB,CAAC,aAAa,CAAC,GAAGC,iBAAiB,CAAC/C,MAAM;IAC1D,OAAOgC,YAAY,CAACnB,IAAI,CAACC,SAAS,CAACgC,gBAAgB,CAAC,CAAC;EACzD,CAAC,EAAE,CAACd,YAAY,CAAC,CAAC;EAClB,MAAMQ,SAAS,GAAIiB,QAAQ,IAAK;IAC5B,IAAI;MACAA,QAAQ,CAAC1D,UAAU,GAAGqC,WAAW,CAACY,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC;MACrD,MAAMU,WAAW,GAAG,IAAI/D,aAAa,CAACoC,SAAS,EAAE0B,QAAQ,CAAC;MAC1D5D,uBAAuB,CAAC8D,WAAW,CAACD,WAAW,CAAC;IACpD,CAAC,CACD,OAAOE,CAAC,EAAE;MACNC,OAAO,CAACC,GAAG,CAACF,CAAC,CAACG,OAAO,CAAC;IAC1B;EACJ,CAAC;EACD,MAAMC,wBAAwB,GAAIC,KAAK,IAAK;IACxC,MAAMC,QAAQ,GAAG;MAAE,GAAGD;IAAM,CAAC;IAC7B,OAAOC,QAAQ,CAACC,WAAW,CAACC,IAAI;IAChC,IAAIC,eAAe,EAAE;MACjBA,eAAe,CAACH,QAAQ,CAAC;IAC7B;EACJ,CAAC;EACD,MAAMI,qBAAqB,GAAIL,KAAK,IAAK;IACrC,MAAMC,QAAQ,GAAG;MAAE,GAAGD;IAAM,CAAC;IAC7B,OAAOC,QAAQ,CAACC,WAAW,CAACC,IAAI;IAChC,IAAIG,YAAY,EAAE;MACdA,YAAY,CAACL,QAAQ,CAAC;IAC1B;EACJ,CAAC;EACD,MAAMM,gBAAgB,GAAIP,KAAK,IAAK;IAChC,MAAMC,QAAQ,GAAG;MAAE,GAAGD;IAAM,CAAC;IAC7B,OAAOC,QAAQ,CAACC,WAAW,CAACC,IAAI;IAChC,IAAIK,OAAO,EAAE;MACTA,OAAO,CAACP,QAAQ,CAAC;IACrB;EACJ,CAAC;EACD,MAAMQ,eAAe,GAAIT,KAAK,IAAK;IAC/B,MAAMC,QAAQ,GAAG;MAAE,GAAGD;IAAM,CAAC;IAC7B,OAAOC,QAAQ,CAACC,WAAW,CAACC,IAAI;IAChC,IAAIO,MAAM,EAAE;MACRA,MAAM,CAACT,QAAQ,CAAC;IACpB;EACJ,CAAC;EACD,MAAMU,cAAc,GAAGpF,SAAS;EAChC,MAAM;IAAEqF,YAAY;IAAEC,QAAQ;IAAET,eAAe;IAAEE,YAAY;IAAEE,OAAO;IAAEE,MAAM;IAAE,GAAGI;EAAW,CAAC,GAAG7C,KAAK;EACvG,oBAAQzC,KAAK,CAACuF,aAAa,CAACJ,cAAc,EAAE;IAAEK,YAAY,EAAE,SAAS;IAAEC,SAAS,EAAE,SAAS;IAAEC,KAAK,EAAE/C,WAAW;IAAEyC,YAAY,EAAEjC,YAAY;IAAEyB,eAAe,EAAEL,wBAAwB;IAAEO,YAAY,EAAED,qBAAqB;IAAEG,OAAO,EAAED,gBAAgB;IAAEG,MAAM,EAAED,eAAe;IAAEzC,KAAK,EAAEA,KAAK;IAAE,GAAG8C;EAAW,CAAC,CAAC;AACnT,CAAC,CAAC;AACF,eAAejD,SAAS","ignoreList":[]}